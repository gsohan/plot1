library(C50)
library(rpart)
library(randomForest)
library(class)

set.seed(123)

# Read train and test datasets

train = read.csv(file="C:/Users/sohan/Desktop/NSL_KDD-master/KDDTrain+.csv",sep=",",header = FALSE)
test = read.csv(file="C:/Users/sohan/Desktop/NSL_KDD-master/KDDTest+.csv",sep=",", header = FALSE)

# Convert factors to integer
train[,2]<-as.integer(train[,2])
train[,3]<-as.integer(train[,3])
train[,4]<-as.integer(train[,4])

test[,2]<-as.integer(test[,2])
test[,3]<-as.integer(test[,3])
test[,4]<-as.integer(test[,4])

# Map attacks category
mapping <- c('normal'=0, 
             'back'=1, 'land'=1,'neptune'=1,'pod'=1,'smurf'=1, 'teardrop'=1,
             'ftp_write'=2, 'guess_passwd'=2, 'imap'=2, 'multihop'=2, 'phf'=2, 'warezclient'=2,'warezmaster'=2,'spy'=2,
             'buffer_overflow'=3,'loadmodule'=3,'perl'=3, 'rootkit'=3,
             'ipsweep'=4,'nmap'=4, 'portsweep'=4, 'satan'=4)
train[,42]<-data.frame(mapping[as.character(train[,42])])
train[,42]<-as.factor(train[,42])

test[,42]<-data.frame(mapping[as.character(test[,42])])
test<-na.omit(test)



# For Binary classifier BC0, normal

map1<-c('0'=1,'1'=0,'2'=0,'3'=0,'4'=0)
c1<-data.frame(map1[as.character(train[,42])])
train[,43]<-c1
train[,43]<-as.factor(train[,43])
f1=C5.0(train[,43]~.,data=train[,1:41])
p1=predict(f1,newdata=test[,1:41],type="class")


# Seperate normal and abnormal datasets
aindex=which(train[,42]!=0)
train_a<-train[aindex,]

aind=which(p1==0)


# For Binary classifier Bc1, DoS

map2<-c('1'=1,'2'=0,'3'=0,'4'=0)
c2<-data.frame(map2[as.character(train_a[,42])])
train_a[,44]<-c2
train_a[,44]<-as.factor(train_a[,44])
f2=C5.0(train_a[,44]~.,data=train_a[,1:41])
p2=predict(f2,newdata=test[aind,1:41],type="class")

# For Binary classifier Bc2, r2l
map3<-c('1'=0,'2'=1,'3'=0,'4'=0)
c3<-data.frame(map3[as.character(train_a[,42])])
train_a[,45]<-c3
train_a[,45]<-as.factor(train_a[,45])
f3=C5.0(train_a[,45]~.,data=train_a[,1:41])
p3=predict(f3,newdata=test[aind,1:41],type="class")

# For Binary classifier Bc3, u2r
map4<-c('1'=0,'2'=0,'3'=1,'4'=0)
c4<-data.frame(map4[as.character(train_a[,42])])
train_a[,46]<-c4
train_a[,46]<-as.factor(train_a[,46])
f4=C5.0(train_a[,46]~.,data=train_a[,1:41])
p4=predict(f4,newdata=test[aind,1:41],type="class")

# For Binary classifier Bc4, probe
map5<-c('1'=0,'2'=0,'3'=0,'4'=1)
c5<-data.frame(map5[as.character(train_a[,42])])
train_a[,47]<-c5
train_a[,47]<-as.factor(train_a[,47])
f5=C5.0(train_a[,47]~.,data=train_a[,1:41])
p5=predict(f5,newdata=test[aind,1:41],type="class")

# Convert to numeric

p2<-as.numeric(p2)
p3<-as.numeric(p3)
p4<-as.numeric(p4)
p5<-as.numeric(p5)
su<-p2+p3+p4+p5

for(i in 1:length(su)){
  if(su[i]==5){
    if(p1[i]==2){
      su[i]=0
    }
    if(p2[i]==2){
      su[i]=1
    }
    if(p3[i]==2){
      su[i]=2
    }
    if(p4[i]==2){
      su[i]=3
    }
    if(p5[i]==2){
      su[i]=4
    }
    
    
  }
  else{
    su[i]=9
  }
  
}

su1<-su

#knn
testindex=which(su1==9)
trainindex=which(su1!=9)
normalize <- function(x) {
  return ((x - min(x)) / (max(x) - min(x))) 
}
normtest=test[aind,1:41]
normtest[,c(1:14,16:19,21:41)]<-lapply(normtest[,c(1:14,16:19,21:41)],normalize)

su1[testindex]<-knn(train=normtest[trainindex,1:41],
                    test=normtest[testindex,1:41],
                    cl=su1[trainindex],
                    k=15)

# convert factor into characters
x2=as.character(test[aind,42])
x4=as.character(su1)

# Find accuracy
x<-Map('==',x2,x4)

accr<-(length(x[x==TRUE]))/length(su)


# For normal data set
x6=as.character(test[-aind,42])
x8=as.character(p1[-aind])
x8i<-as.integer(x8)-1
x8=as.character(x8i)

x9<-Map('==',x6,x8)

accr1<-(length(x9[x9==TRUE]))/length(x6)


# For final accuracy
len<-dim(test)[1]
tot<-accr*length(x)+accr1*length(x9)
accuracy1<-(tot/len)
cat("Final accuracy: ",accuracy1)

